version: '3.8'

services:
  kafka:
    container_name: kafka
    image: bitnami/kafka:latest
    volumes:
      - /tmp:/tmp # Persist Kafka logs - adapt as needed
    networks:
      - app-network
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
    healthcheck:
        test: ["CMD", "sleep", "5"]
        interval: 20s
        timeout: 10s
        retries: 5

  mongodb:
    image: mongo:latest
    container_name: mongodb
    hostname: mongodb
    ports:
      - "27017:27017"
    volumes:
      # - /path/to/host/dir:/data/db # -> Activate if persistence of data is needed
      - /tmp:/tmp # Persist MongoDB logs - adapt as needed
    networks:
      - app-network

  producer:
    build:
      context: .
      dockerfile: dockerfile.producer
    container_name: kafka-producer
    restart: on-failure
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - /tmp:/tmp # Persist producer logs - adapt as needed
    networks:
      - app-network

  consumer:
    build:
      context: .
      dockerfile: dockerfile.consumer
    container_name: kafka-consumer
    restart: on-failure
    depends_on:
      mongodb:
        condition: service_started
      producer:
        condition: service_started
      kafka:
        condition: service_started
    volumes:
      - /tmp:/tmp # Persist consumer logs - adapt as needed
    networks:
      - app-network

networks:
  app-network:
    driver: bridge